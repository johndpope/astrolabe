%%BeginProlog
/acos
{asin
90
exch
sub}
def
/asin
{dup
dup
mul
1
exch
sub
sqrt
atan}
def
/line
{newpath
moveto
lineto}
def
/mod
{exch
dup
type
/integertype
eq
{systemdict
begin
exch
mod
end}
{dup
dup
cvi
sub
exch
cvi
3
2
roll
systemdict
begin
mod
end
add}
ifelse}
def
/pagesize
{currentpagedevice
{exch
/PageSize
ne
{pop}
{dup
0
get
exch
1
get}
ifelse}
forall}
def
/pathlength
{flattenpath
{/ny
exch
def
/nx
exch
def
0}
{/px
nx
def
/py
ny
def
/ny
exch
def
/nx
exch
def
nx
px
sub
dup
mul
ny
py
sub
dup
mul
add
sqrt
add}
{}
{}
pathforall}
def
/pathreverse
{mark
flattenpath
{}
{}
{}
{}
pathforall
polyline}
def
/pathshift
{/o
exch
def
mark
flattenpath
{}
{}
{}
{}
pathforall
counttomark
/n
exch
def
n
2
div
cvi
1
sub
{/A0y
exch
def
/A0x
exch
def
2
copy
A0x
A0y
vsub
90
vrotate
o
vsize
A0x
A0y
vadd
n
1
add
2
roll}
repeat
2
copy
A0x
A0y
vsub
90
vrotate
o
vsize
vadd
n
1
add
2
roll
pop}
def
/pathshow
{/td
exch
def
/t
exch
def
/pd
0
def
/nc
0
def
gsave
flattenpath
{/fy
exch
def
/fx
exch
def
/nx
fx
def
/ny
fy
def
/os
0
def
fx
fy
transform
/cy
exch
def
/cy
exch
def}
{/px
nx
def
/py
ny
def
/ny
exch
def
/nx
exch
def
/dx
nx
px
sub
def
/dy
ny
py
sub
def
/rpl
dx
dup
mul
dy
dup
mul
add
sqrt
def
rpl
0
ne
{/osx
dx
rpl
div
os
mul
def
/osy
dy
rpl
div
os
mul
def
px
osx
add
py
osy
add
transform
/cy
exch
def
/cx
exch
def
/pd
pd
rpl
add
def
{td
pd
le
{nc
t
0
exch
{6
get
length
add}
forall
lt
{t
nc
1
add
exch
0
exch
0
exch
{6
get
length
dup
3
1
roll
add
dup
4
index
ge
{exch
sub
2
index
exch
sub
1
sub
exit}
{exch
pop
exch
1
add
exch}
ifelse}
forall
3
2
roll
pop
/ci
exch
def
/ti
exch
def
/c
t
ti
get
6
get
ci
1
getinterval
def
/nc
nc
1
add
def
gsave
t
ti
get
dup
0
get
exch
1
get
setencoding
t
ti
get
0
get
findfont
t
ti
get
2
get
scalefont
setfont
/cw
c
stringwidth
pop
def
cx
cy
itransform
translate
dy
dx
atan
rotate
0
t
ti
get
3
get
moveto
c
show
currentpoint
t
ti
get
3
get
sub
transform
/cy
exch
def
/cx
exch
def
grestore
/td
td
cw
add
def}
{exit}
ifelse}
{/os
td
pd
sub
def
exit}
ifelse}
loop}
if}
{}
{fx
fy
lineto
fx
fy
moveto}
pathforall
grestore}
def
/polyline
{newpath
moveto
counttomark
2
sub
0
exch
2
exch
{pop
lineto}
for
pop}
def
/setencoding
{exch
dup
findfont
dup
length
dict
begin
{1
index
/FID
ne
{def}
{pop
pop}
ifelse}
forall
exch
/Encoding
exch
def
currentdict
end
definefont
pop}
def
/show
{dup
type
/stringtype
eq
{systemdict
begin
show
end}
{{dup
dup
dup
dup
0
get
exch
1
get
setencoding
0
get
findfont
exch
2
get
scalefont
setfont
[currentpoint]
exch
dup
3
get
0
exch
rmoveto
dup
dup
6
get
exch
5
get
{systemdict
begin
show
end}
{stringwidth
pop
0
rmoveto}
ifelse
dup
4
get
{3
get
neg
0
exch
rmoveto
pop}
{pop
aload
pop
moveto}
ifelse}
forall}
ifelse}
def
/stringwidth
{dup
type
/stringtype
eq
{systemdict
begin
stringwidth
end}
{0
exch
{dup
4
get
{dup
dup
0
get
findfont
exch
2
get
scalefont
setfont
6
get
systemdict
begin
stringwidth
end
pop
add}
{pop}
ifelse}
forall
0.}
ifelse}
def
/vabs
{dup
mul
exch
dup
mul
add
sqrt
abs}
def
/vadd
{3
2
roll
add
3
1
roll
add
exch}
def
/vdot
{3
2
roll
mul
3
1
roll
mul
add}
def
/vphi
{4
copy
vdot
5
1
roll
vabs
3
1
roll
vabs
mul
div
acos}
def
/vrotate
{3
copy
pop
5
copy
exch
atan
add
cos
3
1
roll
vabs
mul
6
1
roll
exch
atan
add
sin
3
1
roll
vabs
mul}
def
/vscale
{dup
3
1
roll
mul
3
1
roll
mul
exch}
def
/vsize
{3
1
roll
2
copy
5
copy
vabs
div
exch
pop
mul
6
1
roll
vabs
exch
pop
div
mul
exch}
def
/vsub
{-1
mul
exch
-1
mul
exch
vadd}
def
%%EndProlog
